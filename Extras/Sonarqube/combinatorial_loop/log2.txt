
2. Executing SYNTH pass.

2.1. Executing HIERARCHY pass (managing design hierarchy).
Statically elaborating the Verific parse tree.
Elaborating all modules in library 'work'
VERIFIC-INFO [VHDL-1067] test1.vhd:50: processing 'test1(Behavioral)'
Importing module NUMERIC_STD.
Importing module TEXTIO.
Importing module standard.
Importing module std_logic_1164.
Importing module test1(Behavioral).

2.2. Executing PROC pass (convert processes to netlists).

2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.2.4. Executing PROC_INIT pass (extract init attributes).

2.2.5. Executing PROC_ARST pass (detect async resets in processes).

2.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module test1(Behavioral).
Optimizing module std_logic_1164.
Optimizing module standard.
Optimizing module TEXTIO.
Optimizing module NUMERIC_STD.

2.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module test1(Behavioral).
Optimizing module std_logic_1164.
Optimizing module standard.
Optimizing module TEXTIO.
Optimizing module NUMERIC_STD.

2.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \test1(Behavioral)..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \NUMERIC_STD..
Removed 0 unused cells and 21 unused wires.
<suppressed ~10 debug messages>

2.5. Executing CHECK pass (checking for obvious problems).
Checking module NUMERIC_STD...
Checking module TEXTIO...
Checking module standard...
Checking module std_logic_1164...
Checking module test1(Behavioral)...
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [0]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [1]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [2]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [3]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [4]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [5]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [6]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$add_6$test1.vhd:103$42 ($add)
    wire \datao [7]
Warning: found logic loop in module test1(Behavioral):
    cell $verific$i10$test1.vhd:110$45 ($not)
    wire \a
Found and reported 9 problems.

2.6. Executing OPT pass (performing simple optimizations).

2.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).
<suppressed ~1 debug messages>

2.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NUMERIC_STD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TEXTIO..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \standard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \std_logic_1164..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \test1(Behavioral)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NUMERIC_STD.
  Optimizing cells in module \TEXTIO.
  Optimizing cells in module \standard.
  Optimizing cells in module \std_logic_1164.
  Optimizing cells in module \test1(Behavioral).
Performed a total of 0 changes.

2.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.6.6. Executing OPT_DFF pass (perform DFF optimizations).
Removing never-active async load on $verific$data_reg$test1.vhd:71$41 ($aldff) from module test1(Behavioral).

2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.6.9. Rerunning OPT passes. (Maybe there is more to do..)

2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NUMERIC_STD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TEXTIO..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \standard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \std_logic_1164..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \test1(Behavioral)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NUMERIC_STD.
  Optimizing cells in module \TEXTIO.
  Optimizing cells in module \standard.
  Optimizing cells in module \std_logic_1164.
  Optimizing cells in module \test1(Behavioral).
Performed a total of 0 changes.

2.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.6.13. Executing OPT_DFF pass (perform DFF optimizations).

2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.6.16. Finished OPT passes. (There is nothing left to do.)

2.7. Executing FSM pass (extract and optimize FSM).

2.7.1. Executing FSM_DETECT pass (finding FSMs in design).

2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.8. Executing OPT pass (performing simple optimizations).

2.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NUMERIC_STD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TEXTIO..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \standard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \std_logic_1164..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \test1(Behavioral)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NUMERIC_STD.
  Optimizing cells in module \TEXTIO.
  Optimizing cells in module \standard.
  Optimizing cells in module \std_logic_1164.
  Optimizing cells in module \test1(Behavioral).
Performed a total of 0 changes.

2.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.8.6. Executing OPT_DFF pass (perform DFF optimizations).

2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.8.9. Finished OPT passes. (There is nothing left to do.)

2.9. Executing WREDUCE pass (reducing word size of cells).

2.10. Executing PEEPOPT pass (run peephole optimizers).

2.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module NUMERIC_STD:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module TEXTIO:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module standard:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module std_logic_1164:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module test1(Behavioral):
  creating $macc model for $verific$add_6$test1.vhd:103$42 ($add).
  creating $alu model for $macc $verific$add_6$test1.vhd:103$42.
  creating $alu cell for $verific$add_6$test1.vhd:103$42: $auto$alumacc.cc:485:replace_alu$48
  created 1 $alu and 0 $macc cells.

2.13. Executing SHARE pass (SAT-based resource sharing).

2.14. Executing OPT pass (performing simple optimizations).

2.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NUMERIC_STD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TEXTIO..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \standard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \std_logic_1164..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \test1(Behavioral)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NUMERIC_STD.
  Optimizing cells in module \TEXTIO.
  Optimizing cells in module \standard.
  Optimizing cells in module \std_logic_1164.
  Optimizing cells in module \test1(Behavioral).
Performed a total of 0 changes.

2.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.14.9. Finished OPT passes. (There is nothing left to do.)

2.15. Executing MEMORY pass.

2.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.17. Executing OPT pass (performing simple optimizations).

2.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).
<suppressed ~1 debug messages>

2.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.17.3. Executing OPT_DFF pass (perform DFF optimizations).

2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.17.5. Finished fast OPT passes.

2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \NUMERIC_STD..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \TEXTIO..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \standard..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \std_logic_1164..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \test1(Behavioral)..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \NUMERIC_STD.
  Optimizing cells in module \TEXTIO.
  Optimizing cells in module \standard.
  Optimizing cells in module \std_logic_1164.
  Optimizing cells in module \test1(Behavioral).
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.19.6. Executing OPT_SHARE pass.

2.19.7. Executing OPT_DFF pass (perform DFF optimizations).

2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..

2.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.19.10. Finished OPT passes. (There is nothing left to do.)

2.20. Executing TECHMAP pass (map to technology primitives).

2.20.1. Executing Verilog-2005 frontend: /opt/tabby/lib/../share/yosys/techmap.v
Parsing Verilog input from `/opt/tabby/lib/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~241 debug messages>

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).
<suppressed ~12 debug messages>

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.21.3. Executing OPT_DFF pass (perform DFF optimizations).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..
Removed 17 unused cells and 32 unused wires.
<suppressed ~18 debug messages>

2.21.5. Finished fast OPT passes.

2.22. Executing ABC pass (technology mapping using ABC).

2.22.1. Extracting gate netlist of module `\NUMERIC_STD' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.2. Extracting gate netlist of module `\TEXTIO' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.3. Extracting gate netlist of module `\standard' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.4. Extracting gate netlist of module `\std_logic_1164' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

2.22.5. Extracting gate netlist of module `\test1(Behavioral)' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$251: \o_data [6] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [6]
                                             \o_data [6] -> $auto$alumacc.cc:485:replace_alu$48.X [6]
Breaking loop using new signal $abcloop$252: \o_data [5] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [5]
                                             \o_data [5] -> $auto$alumacc.cc:485:replace_alu$48.X [5]
Breaking loop using new signal $abcloop$253: \o_data [4] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [4]
                                             \o_data [4] -> $auto$alumacc.cc:485:replace_alu$48.X [4]
Breaking loop using new signal $abcloop$254: \o_data [3] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [3]
                                             \o_data [3] -> $auto$alumacc.cc:485:replace_alu$48.X [3]
Breaking loop using new signal $abcloop$255: \o_data [2] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [2]
                                             \o_data [2] -> $auto$alumacc.cc:485:replace_alu$48.X [2]
Breaking loop using new signal $abcloop$256: \o_data [0] -> \o_data [0]
                                             \o_data [0] -> $auto$alumacc.cc:485:replace_alu$48.CO [0]
Breaking loop using new signal $abcloop$257: \o_data [1] -> $auto$alumacc.cc:485:replace_alu$48.lcu.G [1]
                                             \o_data [1] -> $auto$alumacc.cc:485:replace_alu$48.X [1]
Breaking loop using new signal $abcloop$258: \o_data [7] -> $auto$alumacc.cc:485:replace_alu$48.X [7]
Extracted 40 gates and 56 wires to a netlist network with 16 inputs and 8 outputs.

2.22.5.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.22.5.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:                OR cells:        3
ABC RESULTS:              XNOR cells:        8
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        5
ABC RESULTS:            ANDNOT cells:       10
ABC RESULTS:               XOR cells:        7
ABC RESULTS:        internal signals:       32
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:        8
Removing temp directory.

2.23. Executing OPT pass (performing simple optimizations).

2.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module NUMERIC_STD.
Optimizing module TEXTIO.
Optimizing module standard.
Optimizing module std_logic_1164.
Optimizing module test1(Behavioral).

2.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\NUMERIC_STD'.
Finding identical cells in module `\TEXTIO'.
Finding identical cells in module `\standard'.
Finding identical cells in module `\std_logic_1164'.
Finding identical cells in module `\test1(Behavioral)'.
Removed a total of 0 cells.

2.23.3. Executing OPT_DFF pass (perform DFF optimizations).

2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \NUMERIC_STD..
Finding unused cells or wires in module \TEXTIO..
Finding unused cells or wires in module \standard..
Finding unused cells or wires in module \std_logic_1164..
Finding unused cells or wires in module \test1(Behavioral)..
Removed 0 unused cells and 47 unused wires.
<suppressed ~1 debug messages>

2.23.5. Finished fast OPT passes.

2.24. Executing HIERARCHY pass (managing design hierarchy).

2.25. Printing statistics.

=== NUMERIC_STD ===

   Number of wires:                  0
   Number of wire bits:              0
   Number of public wires:           0
   Number of public wire bits:       0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== TEXTIO ===

   Number of wires:                  0
   Number of wire bits:              0
   Number of public wires:           0
   Number of public wire bits:       0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== standard ===

   Number of wires:                  0
   Number of wire bits:              0
   Number of public wires:           0
   Number of public wire bits:       0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== std_logic_1164 ===

   Number of wires:                  0
   Number of wire bits:              0
   Number of public wires:           0
   Number of public wire bits:       0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

=== test1(Behavioral) ===

   Number of wires:                 39
   Number of wire bits:             67
   Number of public wires:           7
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 48
     $_ANDNOT_                      10
     $_AND_                          1
     $_DFF_P_                        8
     $_NAND_                         6
     $_NOR_                          5
     $_OR_                           3
     $_XNOR_                         8
     $_XOR_                          7

2.26. Executing CHECK pass (checking for obvious problems).
Checking module NUMERIC_STD...
Checking module TEXTIO...
Checking module standard...
Checking module std_logic_1164...
Checking module test1(Behavioral)...
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$259 ($_XOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$261 ($_XNOR_)
    wire $abc$250$new_n25_
    wire \o_data [1]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$262 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$266 ($_XNOR_)
    wire $abc$250$new_n28_
    wire \o_data [2]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$267 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$271 ($_XOR_)
    wire $abc$250$new_n33_
    wire \o_data [3]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$272 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$279 ($_XOR_)
    wire $abc$250$new_n38_
    wire \o_data [4]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$280 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$284 ($_XOR_)
    wire $abc$250$new_n46_
    wire \o_data [5]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$285 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$292 ($_XOR_)
    wire $abc$250$new_n51_
    wire \o_data [6]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$293 ($_XNOR_)
    cell $abc$250$auto$blifparse.cc:386:parse_blif$297 ($_XOR_)
    wire $abc$250$new_n59_
    wire \o_data [7]
Warning: found logic loop in module test1(Behavioral):
    cell $abc$250$auto$blifparse.cc:386:parse_blif$298 ($_XOR_)
    wire \o_data [0]
Found and reported 8 problems.
